git init
git add .
git commit
git status

git config --global user.name "MuthuSusithra"
git config --global user.email "dmsusithra@gmail.com"
git config --global core.editor vim
git config --global core.compression 2
git config --global diff.tool vim.diff

git log
git remote add origin https://github.com/malar1995/gitrepo.git
git push -u origin main
git pull origin
# Create a new branch
$ git branch <branch_name>

# List all remote or local branches
$ git branch -a

# Delete a branch
$ git branch -d <branch_name>


Checkout an existing branch
$ git checkout <branch_name>

# Checkout and create a new branch with that name
$ git checkout -b <new_branch>
# Merge changes into current branch
$ git merge new_feature

git clone <remote_URL>
git pull origin staging

To remove a file from the working index (cached):
$ git rm --cached <file name>

# To delete a file (force):
$ git rm -f <file name>

# To remove an entire directory from the working index (cached):
$ git rm -r --cached <directory name>

# To delete an entire directory (force):
$ git rm -r -f <file name>
In Practice:

# To remove a file from the working index:
$ git rm --cached css/style.css
rm 'css/style.css'

# To delete a file (force):
$ git rm -f css/style.css
rm 'css/style.css'

git ignore:
Git sees every file in your working copy as one of three things:

tracked - a file which has been previously staged or committed;
untracked - a file which has not been staged or committed; or
ignored - a file which Git has been explicitly told to ignore.
Ignored files are usually build artifacts and machine generated files that can be derived from your repository source or should otherwise not be committed.

git stash:
The git stash command takes your uncommitted changes (both staged and unstaged), saves them away for later use, and then reverts them from your working copy
git stash 
git stash -u ---untracked files
git stash -a ----hiden files

To set your global username/email configuration:
Open the command line.

Set your username:
git config --global user.name "FIRST_NAME LAST_NAME"

Set your email address:
git config --global user.email "MY_NAME@example.com"

To set repository-specific username/email configuration:
From the command line, change into the repository directory.

Set your username:
git config user.name "FIRST_NAME LAST_NAME"

Set your email address:
git config user.email "MY_NAME@example.com"

Verify your configuration by displaying your configuration file:
cat .git/config

Git Fork
A fork is a rough copy of a repository. Forking a repository allows you to freely test and debug with changes 
without affecting the original project.
But the significant difference is that the fork is used to create a 
server-side copy, and clone is used to create a local copy of the repository.

Generally, people working on the same project clone 
the repository and the external contributors fork the repository.


Git Stash
Sometimes you want to switch the branches, but you are working on an incomplete part of your current project. You don't want to make a commit of half-done work. Git stashing allows you to do so. 
The git stash command enables you to switch branches without committing the current branch.

Git Head
The HEAD points out the last commit in the current checkout branch. It is like a pointer to any reference. The HEAD can be understood as the "current branch." When you switch 
branches with 'checkout,' the HEAD is transferred to the new branch.

git clone 
git branch
git merge
merge conflict
git branch – to view what is the current branch
git branch <branch_name> – to create a new branch 
git checkout <branch_name> – to navigate to another branch
git branch -d <branch_name> – to delete the local branch, only if you have already pushed and merged it with your remote branches.
git branch -D <branch_name> – to force delete the branch regardless of its push and merge status, so be careful using this one!


Remove/Rename Operations : 

To remove file from staging area : git reset <file_name> 
To remove all untracked files : git clean –i
To rename the recent commit : git commit --amend
To view line by line history : git blame <file_name>

To delete the commits : 
git reset –-hard HEAD^
git reset –-hard HEAD~n – to delete the last “n” number of commits [Eg : git reset –hard HEAD~2 will delete the last 2 commits]
To view line by line history : git blame <file_name>

If you have not yet pushed the commit anywhere, you can use git rebase -i to remove that commit. First, find out how far back that commit is (approximately). Then do:
git rebase -i HEAD~N
CLONE  and FORK: 
git clone https://github.com/MuthuSusithra/GIT2019.git - to copy an existing repository from github
A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project.

MERGE : 
git merge <branch_name> - To merge the branch with master branch
Note : merge should be executed only from master branch . 

git config --global merge.tool vimdiff
git config --global merge.conflictstyle diff3
git config --global mergetool.prompt false

git mergetool – to merge when conflicts are present 	
Operations in mergetool : 
Ctrl+WW – to navigate to each box
:diffg LO – to select LOCAL box
:diffg RE – to select REMOTE box
:diffg BA – to select BASE box
:wqa – To save and quit all

CHERRY-PICK : 
To select the particular commit using its commit id
Command : git cherry-pick 23773fa

git fetch is the command that says "bring my local copy of the remote repository up to date."

git pull says "bring the changes in the remote repository to where I keep my own code."



